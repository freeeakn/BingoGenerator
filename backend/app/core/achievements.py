from enum import Enum
from datetime import datetime
from typing import List, Dict, Optional, Any
from pydantic import BaseModel
from .cache import CacheManager
from .logging import logger
from .notifications import notification_manager, NotificationType, NotificationPriority
from .events import event_manager, GameEventType, GameEvent

class AchievementType(str, Enum):
    # –ò–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    FIRST_WIN = "first_win"                    # –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
    WINNING_STREAK_3 = "winning_streak_3"      # 3 –ø–æ–±–µ–¥—ã –ø–æ–¥—Ä—è–¥
    WINNING_STREAK_5 = "winning_streak_5"      # 5 –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥
    FAST_WIN = "fast_win"                      # –ü–æ–±–µ–¥–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã
    PERFECT_GAME = "perfect_game"              # –ü–æ–±–µ–¥–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    SOCIAL_BUTTERFLY = "social_butterfly"       # 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    POPULAR_PLAYER = "popular_player"          # 50 —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    FRIEND_MAKER = "friend_maker"              # 10 –¥—Ä—É–∑–µ–π
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    VETERAN = "veteran"                        # 100 –∏–≥—Ä
    MASTER = "master"                          # 50 –ø–æ–±–µ–¥
    HIGH_ROLLER = "high_roller"                # –†–µ–π—Ç–∏–Ω–≥ 2000+
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    EARLY_BIRD = "early_bird"                  # –û–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö 100 –∏–≥—Ä–æ–∫–æ–≤
    COMEBACK_KID = "comeback_kid"              # –ü–æ–±–µ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è –≤ 10+ —á–∏—Å–µ–ª
    LUCKY_NUMBER = "lucky_number"              # –í—ã–∏–≥—Ä–∞—Ç—å —Å –ª—é–±–∏–º—ã–º —á–∏—Å–ª–æ–º

class Achievement(BaseModel):
    type: AchievementType
    title: str
    description: str
    icon: str
    points: int
    secret: bool = False
    progress_max: Optional[int] = None
    unlocked_at: Optional[datetime] = None
    current_progress: Optional[int] = None

class AchievementProgress(BaseModel):
    achievement_type: AchievementType
    current_value: int
    target_value: int
    last_updated: datetime = datetime.now()

class AchievementManager:
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    ACHIEVEMENTS = {
        AchievementType.FIRST_WIN: {
            "title": "–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É",
            "icon": "üèÜ",
            "points": 10,
            "secret": False
        },
        AchievementType.WINNING_STREAK_3: {
            "title": "–ü–æ–±–µ–¥–Ω–∞—è —Å–µ—Ä–∏—è",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥",
            "icon": "üî•",
            "points": 20,
            "secret": False
        },
        AchievementType.WINNING_STREAK_5: {
            "title": "–ù–µ–ø–æ–±–µ–¥–∏–º—ã–π",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –∏–≥—Ä –ø–æ–¥—Ä—è–¥",
            "icon": "‚ö°",
            "points": 50,
            "secret": False
        },
        AchievementType.FAST_WIN: {
            "title": "–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –ø–æ–±–µ–¥–∞",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã",
            "icon": "‚ö°",
            "points": 30,
            "secret": False
        },
        AchievementType.PERFECT_GAME: {
            "title": "–ë–µ–∑—É–ø—Ä–µ—á–Ω–∞—è –∏–≥—Ä–∞",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É –±–µ–∑ –µ–¥–∏–Ω–æ–π –æ—à–∏–±–∫–∏",
            "icon": "üíØ",
            "points": 40,
            "secret": False
        },
        AchievementType.SOCIAL_BUTTERFLY: {
            "title": "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫",
            "description": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç",
            "icon": "ü¶ã",
            "points": 15,
            "progress_max": 100,
            "secret": False
        },
        AchievementType.POPULAR_PLAYER: {
            "title": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∏–≥—Ä–æ–∫",
            "description": "–ü–æ–ª—É—á–∏—Ç–µ 50 —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "icon": "‚≠ê",
            "points": 25,
            "progress_max": 50,
            "secret": False
        },
        AchievementType.FRIEND_MAKER: {
            "title": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
            "description": "–î–æ–±–∞–≤—å—Ç–µ 10 –¥—Ä—É–∑–µ–π",
            "icon": "ü§ù",
            "points": 20,
            "progress_max": 10,
            "secret": False
        },
        AchievementType.VETERAN: {
            "title": "–í–µ—Ç–µ—Ä–∞–Ω",
            "description": "–°—ã–≥—Ä–∞–π—Ç–µ 100 –∏–≥—Ä",
            "icon": "üëë",
            "points": 30,
            "progress_max": 100,
            "secret": False
        },
        AchievementType.MASTER: {
            "title": "–ú–∞—Å—Ç–µ—Ä",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ 50 –∏–≥—Ä",
            "icon": "üéØ",
            "points": 50,
            "progress_max": 50,
            "secret": False
        },
        AchievementType.HIGH_ROLLER: {
            "title": "–í—ã—Å—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
            "description": "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ 2000+",
            "icon": "üåü",
            "points": 100,
            "progress_max": 2000,
            "secret": False
        },
        AchievementType.EARLY_BIRD: {
            "title": "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
            "description": "–û–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö 100 –∏–≥—Ä–æ–∫–æ–≤",
            "icon": "üê¶",
            "points": 50,
            "secret": True
        },
        AchievementType.COMEBACK_KID: {
            "title": "–ö–æ—Ä–æ–ª—å –∫–∞–º–±—ç–∫–æ–≤",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–æ—Å–ª–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è –≤ 10+ —á–∏—Å–µ–ª",
            "icon": "üîÑ",
            "points": 40,
            "secret": True
        },
        AchievementType.LUCKY_NUMBER: {
            "title": "–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ",
            "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º —á–∏—Å–ª–æ–º",
            "icon": "üçÄ",
            "points": 15,
            "secret": True
        }
    }

    def __init__(self):
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        event_manager.subscribe(GameEventType.GAME_FINISHED, self._handle_game_finished)
        event_manager.subscribe(GameEventType.CHAT_MESSAGE, self._handle_chat_message)
        event_manager.subscribe(GameEventType.NUMBER_MARKED, self._handle_number_marked)

    async def get_user_achievements(self, user_id: str) -> List[Achievement]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            redis = await CacheManager.get_redis()
            achievements_data = await redis.hgetall(f"user:{user_id}:achievements")
            
            achievements = []
            for ach_type in AchievementType:
                achievement = self.ACHIEVEMENTS[ach_type].copy()
                achievement["type"] = ach_type
                
                if ach_type.value in achievements_data:
                    data = achievements_data[ach_type.value]
                    achievement["unlocked_at"] = datetime.fromisoformat(data)
                
                achievements.append(Achievement(**achievement))
            
            return achievements
            
        except Exception as e:
            logger.error(f"Error getting user achievements: {str(e)}")
            return []

    async def get_achievement_progress(
        self,
        user_id: str,
        achievement_type: AchievementType
    ) -> Optional[AchievementProgress]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            redis = await CacheManager.get_redis()
            progress_key = f"user:{user_id}:achievement_progress:{achievement_type.value}"
            progress_data = await redis.get(progress_key)
            
            if progress_data:
                return AchievementProgress(**progress_data)
            return None
            
        except Exception as e:
            logger.error(f"Error getting achievement progress: {str(e)}")
            return None

    async def unlock_achievement(
        self,
        user_id: str,
        achievement_type: AchievementType
    ):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
        try:
            redis = await CacheManager.get_redis()
            achievement_key = f"user:{user_id}:achievements"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            if await redis.hexists(achievement_key, achievement_type.value):
                return
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            now = datetime.now()
            await redis.hset(
                achievement_key,
                achievement_type.value,
                now.isoformat()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
            points = self.ACHIEVEMENTS[achievement_type]["points"]
            await redis.hincrby(f"user:{user_id}:stats", "achievement_points", points)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            achievement = self.ACHIEVEMENTS[achievement_type]
            await notification_manager.send_notification(
                user_id=user_id,
                type=NotificationType.ACHIEVEMENT_UNLOCKED,
                title=f"–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement['title']}",
                message=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement['title']}' {achievement['icon']}\n{achievement['description']}",
                priority=NotificationPriority.MEDIUM,
                data={
                    "achievement_type": achievement_type.value,
                    "points": points
                }
            )
            
        except Exception as e:
            logger.error(f"Error unlocking achievement: {str(e)}")

    async def update_progress(
        self,
        user_id: str,
        achievement_type: AchievementType,
        value: int
    ):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            if achievement_type not in self.ACHIEVEMENTS:
                return
                
            achievement = self.ACHIEVEMENTS[achievement_type]
            if "progress_max" not in achievement:
                return
                
            redis = await CacheManager.get_redis()
            progress_key = f"user:{user_id}:achievement_progress:{achievement_type.value}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = AchievementProgress(
                achievement_type=achievement_type,
                current_value=value,
                target_value=achievement["progress_max"]
            )
            await redis.set(progress_key, progress.json())
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            if value >= achievement["progress_max"]:
                await self.unlock_achievement(user_id, achievement_type)
                
        except Exception as e:
            logger.error(f"Error updating achievement progress: {str(e)}")

    async def _handle_game_finished(self, event: GameEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
        try:
            winner_id = event.data.get("winner_id")
            if not winner_id:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–±–µ–¥—É
            await self._check_first_win(winner_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–Ω—É—é —Å–µ—Ä–∏—é
            await self._check_winning_streak(winner_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—É—é –ø–æ–±–µ–¥—É
            game_duration = event.data.get("duration")
            if game_duration and game_duration < 120:  # –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç
                await self.unlock_achievement(winner_id, AchievementType.FAST_WIN)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑—É–ø—Ä–µ—á–Ω—É—é –∏–≥—Ä—É
            errors = event.data.get("errors", 0)
            if errors == 0:
                await self.unlock_achievement(winner_id, AchievementType.PERFECT_GAME)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
            await self._update_games_stats(winner_id)
            
        except Exception as e:
            logger.error(f"Error handling game finished event: {str(e)}")

    async def _handle_chat_message(self, event: GameEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        try:
            user_id = event.player_id
            if not user_id:
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            redis = await CacheManager.get_redis()
            messages_count = await redis.hincrby(
                f"user:{user_id}:stats",
                "chat_messages",
                1
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self.update_progress(
                user_id,
                AchievementType.SOCIAL_BUTTERFLY,
                messages_count
            )
            
        except Exception as e:
            logger.error(f"Error handling chat message event: {str(e)}")

    async def _handle_number_marked(self, event: GameEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª"""
        try:
            user_id = event.player_id
            if not user_id:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–±—ç–∫
            game_state = event.data.get("game_state", {})
            player_numbers = len(game_state.get("marked_numbers", {}).get(user_id, []))
            leader_numbers = max(
                len(numbers)
                for player, numbers in game_state.get("marked_numbers", {}).items()
                if player != user_id
            )
            
            if leader_numbers - player_numbers >= 10:
                await self.unlock_achievement(user_id, AchievementType.COMEBACK_KID)
                
        except Exception as e:
            logger.error(f"Error handling number marked event: {str(e)}")

    async def _check_first_win(self, user_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π –ø–æ–±–µ–¥—ã"""
        try:
            redis = await CacheManager.get_redis()
            wins = await redis.hget(f"user:{user_id}:stats", "wins")
            
            if wins == "1":  # –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
                await self.unlock_achievement(user_id, AchievementType.FIRST_WIN)
                
        except Exception as e:
            logger.error(f"Error checking first win: {str(e)}")

    async def _check_winning_streak(self, user_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–Ω–æ–π —Å–µ—Ä–∏–∏"""
        try:
            redis = await CacheManager.get_redis()
            streak_key = f"user:{user_id}:winning_streak"
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
            streak = await redis.incr(streak_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if streak >= 3:
                await self.unlock_achievement(user_id, AchievementType.WINNING_STREAK_3)
            if streak >= 5:
                await self.unlock_achievement(user_id, AchievementType.WINNING_STREAK_5)
                
        except Exception as e:
            logger.error(f"Error checking winning streak: {str(e)}")

    async def _update_games_stats(self, user_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            redis = await CacheManager.get_redis()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
            games = await redis.hincrby(f"user:{user_id}:stats", "games_played", 1)
            await self.update_progress(user_id, AchievementType.VETERAN, games)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
            wins = await redis.hincrby(f"user:{user_id}:stats", "wins", 1)
            await self.update_progress(user_id, AchievementType.MASTER, wins)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating = int(await redis.hget(f"user:{user_id}:stats", "rating") or 0)
            await self.update_progress(user_id, AchievementType.HIGH_ROLLER, rating)
            
        except Exception as e:
            logger.error(f"Error updating games stats: {str(e)}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
achievement_manager = AchievementManager() 